// Dados do cardápio padrão - pode substituir pelo seu banco ou localStorage
const cardapioSemana = {
  "Segunda": ["Arroz", "Feijão", "Frango grelhado", "Salada de alface", "Suco de laranja"],
  "Terça": ["Macarrão ao molho de tomate", "Carne moída", "Legumes cozidos", "Banana"],
  "Quarta": ["Arroz integral", "Feijão preto", "Bife acebolado", "Salada de rúcula", "Maçã"],
  "Quinta": ["Purê de batatas", "Frango ao curry", "Brócolis no vapor", "Laranja"],
  "Sexta": ["Arroz", "Feijão", "Peixe assado", "Salada de cenoura", "Melancia"],
  "Sábado": ["Lasanha de legumes", "Salada verde", "Pêra"],
  "Domingo": ["Churrasco", "Farofa", "Vinagrete", "Abacaxi"]
};

const diasDaSemana = ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"];

const loginContainer = document.getElementById('login-container');
const appContainer = document.getElementById('app-container');

const btnLoginTab = document.getElementById('btn-login');
const btnRegisterTab = document.getElementById('btn-register');
const loginForm = document.getElementById('login-form');
const registerForm = document.getElementById('register-form');

const darkmodeBtn = document.getElementById('darkmode-btn');
const iconTema = document.getElementById('icon-tema');
const logoutBtn = document.getElementById('logout-btn');

const dataAtual = document.getElementById('data-atual');
const cardapioDiaEl = document.getElementById('itens-cardapio-dia');
const cardapioSemanaEl = document.getElementById('semana-container');
const toggleBtn = document.getElementById('toggle-btn');

const adminPanel = document.getElementById('admin-panel');
const inputsSemana = document.getElementById('inputs-semana');

const avaliacaoForm = document.getElementById('avaliacao-form');
const avaliacoesUl = document.getElementById('avaliacoes-ul');

let mostrarSemana = false;
let usuarioLogado = null;

const USUARIOS_KEY = 'usuariosJRM';
const CARDAPIO_KEY = 'cardapioJRM';
const AVALIACOES_KEY = 'avaliacoesJRM';

// --- Formata data ---
function formataData(date) {
  return date.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });
}

// --- Mostrar data atual ---
function mostrarDataAtual() {
  const hoje = new Date();
  dataAtual.textContent = `Data atual: ${formataData(hoje)}`;
}

// --- Mostrar cardápio do dia ---
function mostrarCardapioDia() {
  const hoje = new Date();
  const diaNome = diasDaSemana[hoje.getDay()];
  const itens = obterCardapio()[diaNome] || [];

  cardapioDiaEl.innerHTML = '';
  itens.forEach((item, i) => {
    const li = document.createElement('li');
    li.textContent = item;
    li.style.animationDelay = `${i * 0.1}s`;
    cardapioDiaEl.appendChild(li);
  });
}

// --- Mostrar cardápio da semana ---
function mostrarCardapioSemana() {
  const cardapio = obterCardapio();
  cardapioSemanaEl.innerHTML = '';
  Object.keys(cardapio).forEach(dia => {
    const divDia = document.createElement('div');
    divDia.classList.add('card', 'show');
    divDia.style.marginBottom = '15px';

    const h3 = document.createElement('h3');
    h3.textContent = dia;
    divDia.appendChild(h3);

    const ul = document.createElement('ul');
    cardapio[dia].forEach(item => {
      const li = document.createElement('li');
      li.textContent = item;
      ul.appendChild(li);
    });
    divDia.appendChild(ul);

    cardapioSemanaEl.appendChild(divDia);
  });
}

// --- Alternar visibilidade cardápio ---
toggleBtn.addEventListener('click', () => {
  mostrarSemana = !mostrarSemana;
  if (mostrarSemana) {
    document.getElementById('cardapio-semana').style.display = 'block';
    document.getElementById('cardapio-dia').style.display = 'none';
    toggleBtn.textContent = 'Ver cardápio do dia';
  } else {
    document.getElementById('cardapio-semana').style.display = 'none';
    document.getElementById('cardapio-dia').style.display = 'block';
    toggleBtn.textContent = 'Ver semana inteira';
  }
});

// --- Obter cardápio salvo ou padrão ---
function obterCardapio() {
  const cardapioSalvo = localStorage.getItem(CARDAPIO_KEY);
  if (cardapioSalvo) {
    try {
      return JSON.parse(cardapioSalvo);
    } catch {
      return cardapioSemana;
    }
  }
  return cardapioSemana;
}

// --- Salvar cardápio ---
function salvarCardapio(cardapio) {
  localStorage.setItem(CARDAPIO_KEY, JSON.stringify(cardapio));
}

// --- Montar inputs para edição admin ---
function montarInputsAdmin() {
  inputsSemana.innerHTML = '';
  const cardapio = obterCardapio();
  Object.keys(cardapioSemana).forEach(dia => {
    const diaDiv = document.createElement('div');

    const labelDia = document.createElement('label');
    labelDia.textContent = `Itens para ${dia}:`;
    diaDiv.appendChild(labelDia);

    // Para cada item, criar input
    const itensDia = cardapio[dia] || [];
    itensDia.forEach((item, i) => {
      const input = document.createElement('input');
      input.type = 'text';
      input.name = `${dia}-item-${i}`;
      input.value = item;
      input.placeholder = `Item ${i + 1}`;
      diaDiv.appendChild(input);
    });

    // Adicionar campo para novos itens
    // Permite adicionar quantos quiser, criaremos vários inputs vazios extras
    for (let j = 0; j < 3; j++) {
      const inputNovo = document.createElement('input');
      inputNovo.type = 'text';
      inputNovo.name = `${dia}-item-novo-${j}`;
      inputNovo.placeholder = `Novo item`;
      diaDiv.appendChild(inputNovo);
    }

    inputsSemana.appendChild(diaDiv);
  });
}

// --- Salvar alterações do admin ---
document.getElementById('admin-form').addEventListener('submit', e => {
  e.preventDefault();

  const formData = new FormData(e.target);
  const novoCardapio = {};

  Object.keys(cardapioSemana).forEach(dia => {
    novoCardapio[dia] = [];

    // Pegar todos inputs com prefixo dia
    for (const [key, value] of formData.entries()) {
      if (key.startsWith(dia) && value.trim() !== '') {
        novoCardapio[dia].push(value.trim());
      }
    }
  });

  salvarCardapio(novoCardapio);
  montarInputsAdmin();
  mostrarCardapioDia();
  mostrarCardapioSemana();
  alert('Cardápio atualizado com sucesso!');
});

// --- Sistema de login/logout simples usando localStorage ---

function obterUsuarios() {
  const u = localStorage.getItem(USUARIOS_KEY);
  if (!u) return {};
  try {
    return JSON.parse(u);
  } catch {
    return {};
  }
}

function salvarUsuarios(usuarios) {
  localStorage.setItem(USUARIOS_KEY, JSON.stringify(usuarios));
}

function login(usuario, senha) {
  const usuarios = obterUsuarios();
  if (usuarios[usuario] && usuarios[usuario] === senha) {
    usuarioLogado = usuario;
    localStorage.setItem('usuarioLogado', usuario);
    return true;
  }
  return false;
}

function registrar(usuario, senha) {
  const usuarios = obterUsuarios();
  if (usuarios[usuario]) return false; // Já existe
  usuarios[usuario] = senha;
  salvarUsuarios(usuarios);
  return true;
}

function logout() {
  usuarioLogado = null;
  localStorage.removeItem('usuarioLogado');
}

// --- Atualizar UI após login ---
function atualizarUI() {
  if (usuarioLogado) {
    loginContainer.style.display = 'none';
    appContainer.style.display = 'block';
    logoutBtn.style.display = 'inline-block';
    // Mostrar painel admin só para "admin"
    if (usuarioLogado.toLowerCase() === 'admin') {
      adminPanel.style.display = 'block';
      montarInputsAdmin();
    } else {
      adminPanel.style.display = 'none';
    }
  } else {
    loginContainer.style.display = 'block';
    appContainer.style.display = 'none';
    logoutBtn.style.display = 'none';
  }
}

// --- Eventos login/register ---

btnLoginTab.addEventListener('click', () => {
  btnLoginTab.classList.add('active');
  btnRegisterTab.classList.remove('active');
  loginForm.classList.add('active');
  registerForm.classList.remove('active');
});

btnRegisterTab.addEventListener('click', () => {
  btnRegisterTab.classList.add('active');
  btnLoginTab.classList.remove('active');
  registerForm.classList.add('active');
  loginForm.classList.remove('active');
});

loginForm.addEventListener('submit', e => {
  e.preventDefault();
  const usuario = document.getElementById('login-username').value.trim();
  const senha = document.getElementById('login-password').value.trim();

  if (login(usuario, senha)) {
    alert(`Bem vindo, ${usuario}!`);
    atualizarUI();
    mostrarCardapioDia();
    mostrarCardapioSemana();
    mostrarDataAtual();
    carregarAvaliacoes();
  } else {
    alert('Usuário ou senha incorretos.');
  }
});

registerForm.addEventListener('submit', e => {
  e.preventDefault();
  const usuario = document.getElementById('register-username').value.trim();
  const senha = document.getElementById('register-password').value.trim();
  const senhaConf = document.getElementById('register-password-confirm').value.trim();

  if (senha !== senhaConf) {
    alert('As senhas não coincidem.');
    return;
  }
  if (registrar(usuario, senha)) {
    alert('Usuário registrado com sucesso! Agora faça login.');
    btnLoginTab.click();
  } else {
    alert('Usuário já existe.');
  }
});

logoutBtn.addEventListener('click', () => {
  logout();
  atualizarUI();
});

// --- Dark Mode toggle ---

function carregarTema() {
  const tema = localStorage.getItem('temaJRM');
  if (tema === 'dark') {
    document.body.classList.add('dark');
    iconTema.textContent = 'light_mode';
  } else {
    document.body.classList.remove('dark');
    iconTema.textContent = 'dark_mode';
  }
}

darkmodeBtn.addEventListener('click', () => {
  document.body.classList.toggle('dark');
  if (document.body.classList.contains('dark')) {
    iconTema.textContent = 'light_mode';
    localStorage.setItem('temaJRM', 'dark');
  } else {
    iconTema.textContent = 'dark_mode';
    localStorage.setItem('temaJRM', 'light');
  }
});

// --- Avaliações ---

function carregarAvaliacoes() {
  const avaliacoesStr = localStorage.getItem(AVALIACOES_KEY);
  let avaliacoes = [];
  try {
    avaliacoes = avaliacoesStr ? JSON.parse(avaliacoesStr) : [];
  } catch {
    avaliacoes = [];
  }

  avaliacoesUl.innerHTML = '';

  if (avaliacoes.length === 0) {
    avaliacoesUl.innerHTML = '<li>Nenhuma avaliação ainda.</li>';
    return;
  }

  // Mostrar média geral
  const somaNotas = avaliacoes.reduce((acc, a) => acc + a.nota, 0);
  const media = (somaNotas / avaliacoes.length).toFixed(2);
  const liMedia = document.createElement('li');
  liMedia.textContent = `Média geral: ${media} ⭐ (${avaliacoes.length} avaliações)`;
  liMedia.classList.add('media-geral');
  avaliacoesUl.appendChild(liMedia);

  avaliacoes.forEach(a => {
    const li = document.createElement('li');
    li.textContent = `${a.nota} ⭐ - ${a.comentario || '(sem comentário)'}`;
    avaliacoesUl.appendChild(li);
  });
}

avaliacaoForm.addEventListener('submit', e => {
  e.preventDefault();

  const nota = Number(document.getElementById('avaliacao-nota').value);
  const comentario = document.getElementById('avaliacao-comentario').value.trim();

  if (!nota || nota < 1 || nota > 5) {
    alert('Por favor, escolha uma nota entre 1 e 5.');
    return;
  }

  let avaliacoes = [];
  const avaliacoesStr = localStorage.getItem(AVALIACOES_KEY);
  try {
    avaliacoes = avaliacoesStr ? JSON.parse(avaliacoesStr) : [];
  } catch {
    avaliacoes = [];
  }

  avaliacoes.push({ nota, comentario });
  localStorage.setItem(AVALIACOES_KEY, JSON.stringify(avaliacoes));

  alert('Obrigado pela avaliação!');
  avaliacaoForm.reset();
  carregarAvaliacoes();
});

// --- Iniciar ---

function iniciar() {
  // Verificar usuário logado salvo
  const usuarioSalvo = localStorage.getItem('usuarioLogado');
  if (usuarioSalvo) {
    usuarioLogado = usuarioSalvo;
    atualizarUI();
    mostrarCardapioDia();
    mostrarCardapioSemana();
    mostrarDataAtual();
    carregarAvaliacoes();
  } else {
    atualizarUI();
  }
  carregarTema();
}

iniciar();
